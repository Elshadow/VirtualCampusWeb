<?npl
--[[
Title: school profile
Author: wuxiangan
Date: 2016/10/21
]]
include_once("./abstract/base.page")

local school = inherit(models.abstract.base, gettable("models.school"))
school.db_name = "school"


function school:ctor()
	self:addfield("schoolName", "string", false, 30)
	self:addfield("northWestLat", "string", false, 30)
	self:addfield("norhtWestLng", "string", false, 30)
	self:addfield("northEastLat", "string", false, 30)
	self:addfield("northEastLng", "string", false, 30)
	self:addfield("southWestLat", "string", false, 30)
	self:addfield("southWestLng", "string", false, 30)
	self:addfield("southEastLat", "string", false, 30)
	self:addfield("southEastLng", "string", false, 30)
end

function school:get(params) 
	self:db():find({}, resume)
	local err, data = yield()
	
	if err then
		return errors:wrap(err, data)
	end

	return {error=errors.SUCCESS, data=data}
end

-- 更新学校地理坐标信息
function school:update(params) 
	local err, query = self:validateQuery(params)
	if err or (not query._id) then 
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	if query then
		-- following field is forbidden to change by the school. 
		query.schoolName = nil
	end

	self:db():updateOne({_id=query._id}, query, resume)

	return errors:wrap(yield())
end

-- 删除学校信息 
function school:api_deleteById(params) 
	-- 只能删除自己
	if not params.schoolId then
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end

	local schoolId = params.schoolId -- debug
	-- local schoolId = self:ensureAuthenticated()

	self:db():deleteOne({_id=schoolId}, resume)
	local err, data = yield() 
	
	return errors:wrap() 
end

-- 更新学校信息
function school:api_updateSchoolInfo(schoolId, params)
	self:db():updateOne({_id=schoolId}, params, resume)
	local err, data = yield()
end

-- 通过用户ID获得学校信息
function school:api_getById(params)
	if not params.schoolId then 
		return errors:wrap(errors.REQUEST_PARAMS_ERROR)
	end
	
	schoolId = params.schoolId

	self:db():findOne({_id=schoolId}, resume)
	local err, data = yield()
	if not data then
		return errors:wrap(err or errors.NOT_FOUND, data)
	end

	return errors:wrap(nil, data)
end

-- 获得学校数量
function school:api_getCount(params)
	self:db():count({}, resume)
	
	return errors:wrap(yield())
end

-- 获得id排序的学校列表
function school:api_getSchoolIdSortList(params)
	-- local skip, limit = util:pagination(params)	
	
	-- local count = self:api_getCount().data
	self:db():find({}, resume)
	local err, data = yield()

	if err then 
		return errors:wrap(err)
	end
	
	return errors:wrap(nil, {schoolList=data})
end